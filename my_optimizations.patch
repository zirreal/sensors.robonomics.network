From 5e05740d88c17913ef4a7ee564e9c2120c530946 Mon Sep 17 00:00:00 2001
From: Anastasiia Bakai <nastin_box@list.ru>
Date: Thu, 11 Sep 2025 16:40:20 +0300
Subject: [PATCH] Fix: reduced get requests, faster unit switcher

---
 src/components/sensor/Chart.vue       |  4 +--
 src/components/sensor/SensorPopup.vue | 35 +++++++++++++++------------
 src/views/Main.vue                    | 33 +++++++++++++------------
 3 files changed, 39 insertions(+), 33 deletions(-)

diff --git a/src/components/sensor/Chart.vue b/src/components/sensor/Chart.vue
index 45f1a66..4a97b0e 100644
--- a/src/components/sensor/Chart.vue
+++ b/src/components/sensor/Chart.vue
@@ -19,7 +19,7 @@
 </template>
 
 <script setup>
-import { ref, watch, onMounted, computed, nextTick } from 'vue';
+import { ref, watch, computed, nextTick } from 'vue';
 import { useRoute, useRouter } from 'vue-router';
 import { useI18n } from 'vue-i18n';
 import Highcharts from 'highcharts';
@@ -108,7 +108,7 @@ const visibleLegend = computed(() => {
 
   const groupedIds = Object.values(GROUPS).flatMap(g => g.members);
   ids.forEach(id => {
-    if (!groupedIds.includes(id)) {
+    if (!groupedIds.includes(id) && id.toLowerCase() !== 'aqi') {
       legend.push({
         key: id,
         labelKey: unitsettings[id]?.namelong?.[locale.value] || unitsettings[id]?.nameshort?.[locale.value] || id.toUpperCase(),
diff --git a/src/components/sensor/SensorPopup.vue b/src/components/sensor/SensorPopup.vue
index e217148..5b4018b 100644
--- a/src/components/sensor/SensorPopup.vue
+++ b/src/components/sensor/SensorPopup.vue
@@ -225,8 +225,9 @@ const emit = defineEmits(["history", "close", 'getScope']);
 const route = useRoute();
 const router = useRouter();
 const { t, locale } = useI18n();
-const { proxy } = getCurrentInstance();
-const filters = proxy.$filters;
+const instance = getCurrentInstance();
+const { proxy } = instance || {};
+const filters = proxy?.$filters;
 const globalWindow = window;
 
 // Единообразное описание локального состояния в одном реактивном объекте
@@ -468,19 +469,22 @@ const updatert = () => {
 }
 
 const closesensor = () => {
-  router.replace({
-    name: route.name,
-    query: {
-      provider: route.query.provider,
-      type: route.query.type,
-      zoom: route.query.zoom,
-      lat: route.query.lat,
-      lng: route.query.lng,
-    },
-  });
-  emit("close");
-
-  state.showAnalysisChart = false
+  try {
+    router.replace({
+      name: route.name,
+      query: {
+        provider: route.query.provider,
+        type: route.query.type,
+        zoom: route.query.zoom,
+        lat: route.query.lat,
+        lng: route.query.lng,
+        // Убираем sensor из URL чтобы предотвратить автоматическое открытие
+      },
+    });
+    emit("close");
+  } catch (error) {
+    console.error('Error closing sensor:', error);
+  }
 };
 
 function addressQuality(addr) {
@@ -562,7 +566,6 @@ function getMapLink(lat, lon, label = "Sensor") {
 }
 
 onMounted(() => {
-
   state.start = props.startTime ? dayISO(Number(props.startTime)) : dayISO();
 
   updatert();
diff --git a/src/views/Main.vue b/src/views/Main.vue
index 6b1ed05..04af48c 100755
--- a/src/views/Main.vue
+++ b/src/views/Main.vue
@@ -479,11 +479,12 @@ const handlerClick = async (point) => {
   state.isLoad = true;
   state.point = [];
   
-  // Use existing logs from mapStore.sensors - no API calls needed
+  // Get logs from API
   let log = [];
-  const sensorData = mapStore.sensors.find(s => s.sensor_id === point.sensor_id);
-  if (sensorData && sensorData.logs) {
-    log = sensorData.logs;
+  try {
+    log = await state.providerObj.getHistoryPeriodBySensor(point.sensor_id, state.start, state.end);
+  } catch (error) {
+    console.error('Error fetching sensor history:', error);
   }
   
   mapStore.mapinactive = true;
@@ -500,10 +501,16 @@ const handlerClick = async (point) => {
 
 const handlerHistoryLog = async ({ sensor_id, start, end }) => {
   if (state.status === "history") {
-    // Use existing logs from mapStore.sensors - no API calls needed
-    const sensorData = mapStore.sensors.find(s => s.sensor_id === sensor_id);
-    if (sensorData && sensorData.logs) {
-      state.point = { ...state.point, log: [...sensorData.logs] };
+    // Get fresh logs from API for the new date range
+    let log = [];
+    try {
+      log = await state.providerObj.getHistoryPeriodBySensor(sensor_id, start, end);
+    } catch (error) {
+      // Silently handle error - log will remain empty
+    }
+    
+    if (state.point && state.point.sensor_id === sensor_id) {
+      state.point = { ...state.point, log: [...log] };
     }
   }
 };
@@ -529,9 +536,9 @@ const getScope = async (type) => {
 const handlerClose = () => {
   mapStore.mapinactive = false;
 
-  if (state.point) {
+  if (state.point && state.point.sensor_id) {
     markers.hidePath(state.point.sensor_id);
-    handleActivePoint(state.point.sensor_id)
+    // Don't call handleActivePoint when closing - just hide the path
   }
   state.point = null;
   instanceMap().setActiveArea({
@@ -542,11 +549,7 @@ const handlerClose = () => {
     height: "100%",
   });
   unsubscribeRealtime();
-  // Repaint markers to match the latest selected unit (from store) once popup is closed
-  const u = (mapStore.currentUnit || props.type || '').toLowerCase();
-  if (u) {
-    handleTypeChange(u);
-  }
+  // Don't repaint markers when closing - they should stay as they are
 };
 
 const handleTypeChange = async (newType) => {
-- 
2.47.0

